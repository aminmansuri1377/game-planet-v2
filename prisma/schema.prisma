generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Buyer {
  id           Int    @id @default(autoincrement())
  phone        String    @unique
  firstName    String?
  lastName     String?
  IDnumber     String?
  orders       Order[]   @relation("BuyerOrders")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  SavedProduct SavedProduct[]

  Comment Comment[]
}
model Seller {
  id           Int       @id @default(autoincrement())
  phone        String    @unique
  firstName    String?
  lastName     String?
  IDnumber     String?
  sellerOrders Order[]   @relation("SellerOrders")
  products     Product[] @relation("SellerProducts")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}
model Manager {
  id           Int       @id @default(autoincrement())
  phone        String    @unique
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Category {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  products    Product[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}
model Guaranty {
  id          Int         @id @default(autoincrement())
  text        String      @unique
  products    Product[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  description String
  price       Float
  inventory   Int         @default(0)
  sendingType SendingType[]
  categoryId  Int?
  category    Category?    @relation(fields: [categoryId], references: [id])
  guarantyId  Int?
  guaranty    Guaranty?    @relation(fields: [guarantyId], references: [id])
  sellerId    Int
  seller      Seller        @relation("SellerProducts", fields: [sellerId], references: [id])
  orders      Order[]     @relation("ProductOrders")
  // images      String[]    
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  SavedProduct SavedProduct[]
  Comment Comment[]
  latitude    Float?     
  longitude   Float?
  city        String?
}
model SavedProduct {
  id        Int      @id @default(autoincrement())
  buyerId   Int
  productId Int
  buyer     Buyer    @relation(fields: [buyerId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([buyerId, productId]) 
}
model Comment {
  id        Int      @id @default(autoincrement())
  text      String
  buyerId   Int
  buyer     Buyer    @relation(fields: [buyerId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Order {
  id          Int         @id @default(autoincrement())
  productId   Int
  userId      Int
  sellerId    Int
  status      String
  sendingType SendingType 
  startDate     DateTime?  
  endDate       DateTime?
  totalPrice  Float
  quantity    Int         @default(1)
  product     Product     @relation("ProductOrders", fields: [productId], references: [id])
  seller      Seller        @relation("SellerOrders", fields: [sellerId], references: [id])
  user        Buyer        @relation("BuyerOrders", fields: [userId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  latitude    Float?      
  longitude   Float?

}
enum SendingType {
  SELLER_SENDS
  BUYER_PICKS_UP
}
